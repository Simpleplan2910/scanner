// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	db "scanner/pkg/db"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// ReposStore is an autogenerated mock type for the ReposStore type
type ReposStore struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, v
func (_m *ReposStore) Add(ctx context.Context, v *db.Repos) (primitive.ObjectID, error) {
	ret := _m.Called(ctx, v)

	var r0 primitive.ObjectID
	if rf, ok := ret.Get(0).(func(context.Context, *db.Repos) primitive.ObjectID); ok {
		r0 = rf(ctx, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *db.Repos) error); ok {
		r1 = rf(ctx, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ReposStore) Delete(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Filter provides a mock function with given fields: ctx, filter
func (_m *ReposStore) Filter(ctx context.Context, filter *db.FilterRepos) ([]db.Repos, int64, error) {
	ret := _m.Called(ctx, filter)

	var r0 []db.Repos
	if rf, ok := ret.Get(0).(func(context.Context, *db.FilterRepos) []db.Repos); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Repos)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, *db.FilterRepos) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *db.FilterRepos) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, id
func (_m *ReposStore) Get(ctx context.Context, id primitive.ObjectID) (*db.Repos, error) {
	ret := _m.Called(ctx, id)

	var r0 *db.Repos
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *db.Repos); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Repos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, update
func (_m *ReposStore) Update(ctx context.Context, id primitive.ObjectID, update *db.UpdateRepos) error {
	ret := _m.Called(ctx, id, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *db.UpdateRepos) error); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
