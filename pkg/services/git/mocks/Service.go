// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	git "scanner/pkg/services/git"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetRepos provides a mock function with given fields: reposURl
func (_m *Service) GetRepos(reposURl string) (git.Repos, error) {
	ret := _m.Called(reposURl)

	var r0 git.Repos
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (git.Repos, error)); ok {
		return rf(reposURl)
	}
	if rf, ok := ret.Get(0).(func(string) git.Repos); ok {
		r0 = rf(reposURl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(git.Repos)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(reposURl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
